/* Generated By:JavaCC: Do not edit this line. Parser.java */
package net.loveruby.cflat.parser;
import net.loveruby.cflat.ast.*;
import net.loveruby.cflat.entity.*;
import net.loveruby.cflat.type.*;
import net.loveruby.cflat.asm.Label;
import net.loveruby.cflat.utils.ErrorHandler;
import net.loveruby.cflat.exception.*;
import java.lang.reflect.*;
import java.util.*;
import java.io.*;

//生成从文件读入代码的解析器
public class Parser implements ParserConstants {

    static public AST parseFile(File file,
                                ErrorHandler errorHandler)
                                throws SyntaxException, FileException {
        return parseFile(file,  errorHandler, false);
    }

    // #@@range/parseFile{
    //解析文件的静态方法
    static public AST parseFile(File file,
                                ErrorHandler errorHandler, boolean debug)
                                throws SyntaxException, FileException {
    // 首先用newFileParser生成从文件读入代码的解析器，并调用parse方法开始解析
        return newFileParser(file, errorHandler, debug).parse();
    }
    // #@@}

    static public Declarations parseDeclFile(File file,

                                             ErrorHandler errorHandler)
                                             throws SyntaxException,
                                                    FileException {
        return parseDeclFile(file, errorHandler, false);
    }

    static public Declarations parseDeclFile(File file,

                                             ErrorHandler errorHandler,
                                             boolean debug)
                                             throws SyntaxException,
                                                    FileException {
        return newFileParser(file,  errorHandler, debug).parseDecls();
    }

    // #@@range/newFileParser{
    // 生成读取文件file的FileInputStream对象，并用InputStreamReader和BufferedReader将其封装
    static final public String SOURCE_ENCODING = "UTF-8";

    static public Parser newFileParser(File file,

                                       ErrorHandler errorHandler,
                                       boolean debug)
                                       throws FileException {
        try {
            BufferedReader r =
                new BufferedReader(
                    new InputStreamReader(new FileInputStream(file),
                                          SOURCE_ENCODING));
            return new Parser(r, file.getPath(),  errorHandler, debug);
        }
        catch (FileNotFoundException ex) {
            throw new FileException(ex.getMessage());
        }
        catch (UnsupportedEncodingException ex) {
            throw new Error("\u662f\u5426\u4e0d\u652f\u6301UTF-8? " + ex.getMessage());
        }
    }
    // #@@}

    // #@@range/instance_members{
    private String sourceName;  //源文件名字
//    private LibraryLoader loader;
    private ErrorHandler errorHandler;
    //private Set<String> knownTypedefs;
    // #@@}

    // #@@range/ctor1{
    public Parser(Reader s, String name,
                   ErrorHandler errorHandler) {
        this(s, name, errorHandler, false);
    }
    // #@@}

    // #@@range/ctor2{
    // Parser类的构造函数
    public Parser(Reader s, String name,
                  ErrorHandler errorHandler, boolean debug) {
        this(s);
        this.sourceName = name; //源程序的文件名
//        this.loader = loader;   //用import关键字读入 import文件的加载器
        this.errorHandler = errorHandler;   //处理错误或警告的对象
        //this.knownTypedefs = new HashSet<String>(); //保存用typedef定义的类型名称
        //当debug为true的时候，通过enable_tracing方法来调用javaCC的跟踪(trace)功能
        if (debug) {
            enable_tracing();
        }
        else {
            disable_tracing();
        }
    }
    // #@@}

    // #@@range/parse{
    // 解析器的启动
    public AST parse() throws SyntaxException {
        try {
            //调用和需要解析的非终端符号同名的方法开始解析处理
            return compilation_unit();
        }
        //发生扫描错误
        catch (TokenMgrError err) {
            throw new SyntaxException(err.getMessage());
        }
        //发生解析错误
        catch (ParseException ex) {
            throw new SyntaxException(ex.getMessage());
        }
        //发生解析错误，javaCC内部使用的异常
        catch (LookaheadSuccess err) {
            throw new SyntaxException("syntax error");
        }
    }
    // #@@}

    public Declarations parseDecls() throws SyntaxException {
        try {
            return declaration_file();
        }
        catch (TokenMgrError ex) {
            throw new SyntaxException(ex.getMessage());
        }
        catch (ParseException ex) {
            throw new SyntaxException(ex.getMessage());
        }
    }

   /*private void addKnownTypedefs(List<TypedefNode> typedefs) {
        for (TypedefNode n : typedefs) {
            addType(n.name());
        }
    }*/

   /*private void addType(String name) {
        knownTypedefs.add(name);
    }*/

    /*private boolean isType(String name) {
        return knownTypedefs.contains(name);
    }*/

    // #@@range/newReader{
    private IntegerLiteralNode integerNode(Location loc, String image) {
        long i = integerValue(image);
        if (image.endsWith("UL")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.ulongRef(), i);
        }
        else if (image.endsWith("L")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.longRef(), i);
        }
        else if (image.endsWith("U")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.uintRef(), i);
        }
        else {
            return new IntegerLiteralNode(loc, IntegerTypeRef.intRef(), i);
        }
    }
    // #@@}

    // #@@range/integerValue{
    private long integerValue(String image) {
        String s = image.replaceFirst("[UL]+", "");
        if (s.startsWith("0x") || s.startsWith("0X")) {
            return Long.parseLong(s.substring(2), 16);
        }
        else if (s.startsWith("0") && !s.equals("0")) {
            return Long.parseLong(s.substring(1), 8);
        }
        else {
            return Long.parseLong(s, 10);
        }
    }
    // #@@}

    // #@@range/characterCode{
    private long characterCode(String image) throws ParseException {
        String s = stringValue(image);
        if (s.length() != 1) {
            throw new Error("must not happen: character length > 1");
        }
        return (long)s.charAt(0);
    }
    // #@@}

    // #@@range/stringValue{
    private String stringValue(String _image) throws ParseException {
        int pos = 0;
        int idx;
        StringBuffer buf = new StringBuffer();
        String image = _image.substring(1, _image.length() - 1);

        while ((idx = image.indexOf("\u005c\u005c", pos)) >= 0) {
            buf.append(image.substring(pos, idx));
            if (image.length() >= idx + 4
                    && Character.isDigit(image.charAt(idx+1))
                    && Character.isDigit(image.charAt(idx+2))
                    && Character.isDigit(image.charAt(idx+3))) {
                buf.append(unescapeOctal(image.substring(idx+1, idx+4)));
                pos = idx + 4;
            }
            else {
                buf.append(unescapeSeq(image.charAt(idx+1)));
                pos = idx + 2;
            }
        }
        if (pos < image.length()) {
            buf.append(image.substring(pos, image.length()));
        }
        return buf.toString();
    }
    // #@@}

    private TypeRef size_t() {
        return IntegerTypeRef.ulongRef();
    }

    // #@@range/unescapeOctal{
    private static final int charMax = 255;

    private char unescapeOctal(String digits) throws ParseException {
        int i = Integer.parseInt(digits, 8);
        if (i > charMax) {
            throw new ParseException(
                "octal character sequence too big: \u005c\u005c" + digits);
        }
        return (char)i;
    }
    // #@@}

    // #@@range/unescapeSeq{
    private static final char bell = 7;
    private static final char backspace = 8;
    private static final char escape = 27;
    private static final char vt = 11;

    private char unescapeSeq(char c) throws ParseException {
        switch (c) {
        case '0': return '\u005c0';
        case '"': return '"';
        case '\u005c'': return '\u005c'';
        case 'a': return bell;
        case 'b': return backspace;
        case 'e': return escape;
        case 'f': return '\u005cf';
        case 'n': return '\u005cn';
        case 'r': return '\u005cr';
        case 't': return '\u005ct';
        case 'v': return vt;
        default:
            throw new ParseException("unknown escape sequence: \u005c"\u005c\u005c" + c);
        }
    }
    // #@@}

    // #@@range/location{
    protected Location location(Token t) {
        return new Location(sourceName, t);
    }

                                                       // rule5
// #@@}

/*
 *  Grammar
 */

// #@@range/compilation_unit{
// 表示1个文件整体的非终端符号
  final public AST compilation_unit() throws ParseException {
    trace_call("compilation_unit");
    try {
    Token t;
    Declarations  decls;
            t = getToken(1);
      //开头是数个import声明(import_stmts),之后排列的是函数或类型定义(top_defs)
          //<EOF>是表示文件末尾的终端符号。在像compilation_unit()这种表示需要分析的对象整体的符号最后，要写上<EOF>
              decls = top_defs();
      jj_consume_token(0);
            {if (true) return new AST(location(t), decls);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("compilation_unit");
    }
  }

// #@@}

// #@@range/declaration_file{
  final public Declarations declaration_file() throws ParseException {
    trace_call("declaration_file");
    try {
    Declarations  decls = new Declarations();
//    UndefinedFunction funcdecl;
//    UndefinedVariable vardecl;
    Constant defconst;
    StructNode defstruct;
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRUCT:
        case CONST:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
          defconst = defconst();
                             decls.addConstant(defconst);
          break;
        case STRUCT:
          defstruct = defstruct();
                              decls.addDefstruct(defstruct);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
            {if (true) return decls;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("declaration_file");
    }
  }

// #@@}

// #@@range/import_stmts{
// import声明的规则
/*Declarations import_stmts():
{
    String libid;
    Declarations impdecls = new Declarations();
}
{
    //import声明的列表，含0个或多个import_stmt
    (libid=import_stmt()
        {
            try {
                Declarations decls = loader.loadLibrary(libid, errorHandler);
                if (decls != null) {
                    impdecls.add(decls);
                    //addKnownTypedefs(decls.typedefs());
                }
            }
            catch (CompileException ex) {
                throw new ParseException(ex.getMessage());
            }
        }
    )*
        {
            return impdecls;
        }
}*/
// #@@}

// #@@range/import_stmt{
// import声明
/*String import_stmt():
{
    StringBuffer buf = new StringBuffer();
    String n;
}
{
    //import_stmt由保留字import, name(), 0个或多个点(".")和name()的列表，以及最后的分好(";")排列而成。
    <IMPORT> n=name()   { buf.append(n); }
    ("." n=name()       { buf.append("."); buf.append(n); } )*
    ";"
        {
            return buf.toString();
        }
}*/
// #@@}

// #@@range/top_defs{
// 函数或类型定义
  final public Declarations top_defs() throws ParseException {
    trace_call("top_defs");
    try {
    Declarations decls = new Declarations();
    DefinedFunction defun;
    List<DefinedVariable> defvars;
    Constant defconst;
    StructNode defstruct;
//    UnionNode defunion;
    TypedefNode typedef;
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case CHAR:
        case SHORT:
        case INT:
        case LONG:
        case STRUCT:
        case STATIC:
        case CONST:
        case UNSIGNED:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        if (jj_2_1(2147483647)) {
          // 函数定义
                defun = defun();
                              decls.addDefun(defun);
        } else if (jj_2_2(3)) {
          // 变量定义
                defvars = defvars();
                              decls.addDefvars(defvars);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONST:
            defconst = defconst();
                              decls.addConstant(defconst);
            break;
          case STRUCT:
            defstruct = defstruct();
                              decls.addDefstruct(defstruct);
            break;
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
            {if (true) return decls;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("top_defs");
    }
  }

// #@@}

// #@@range/defvars{
// 变量定义的语法
  final public List<DefinedVariable> defvars() throws ParseException {
    trace_call("defvars");
    try {
    List<DefinedVariable> defs = new ArrayList<DefinedVariable>();
    boolean priv;
    TypeNode type;
    String name;
    ExprNode init = null;
      // storage()是可以省略的static
          // type() 变量类型
          // name() 变量名
          // ["=" init=expr()] 可以省略的初始化表达式
          // 不支持var = {1,2,3}这样子
          // int x = 3, y;
          priv = storage();
      type = type();
      name = name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        init = expr();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
            defs.add(new DefinedVariable(priv, type, name, init));
            init = null;
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 43:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(43);
        name = name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 42:
          jj_consume_token(42);
          init = expr();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
            defs.add(new DefinedVariable(priv, type, name, init));
            init = null;
      }
      jj_consume_token(44);
            {if (true) return defs;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("defvars");
    }
  }

// #@@}

// #@@range/defconst{
  final public Constant defconst() throws ParseException {
    trace_call("defconst");
    try {
    TypeNode type;
    String name;
    ExprNode value;
      jj_consume_token(CONST);
      type = type();
      name = name();
      jj_consume_token(42);
      value = expr();
      jj_consume_token(44);
            {if (true) return new Constant(type, name, value);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("defconst");
    }
  }

// #@@}

// #@@range/defun{
// 函数定义
  final public DefinedFunction defun() throws ParseException {
    trace_call("defun");
    try {
    boolean priv;
    TypeRef ret;    //typeref()在语法层面上和type()是相同的
    String n;   //函数名
    Params ps;  //形参声明
    BlockNode body;
      // static int findMax(int x, int y, int z){}
          priv = storage();
      ret = typeref();
      n = name();
      jj_consume_token(41);
      ps = params();
      jj_consume_token(45);
      body = block();
            TypeRef t = new FunctionTypeRef(ret, ps.parametersTypeRef());
            {if (true) return new DefinedFunction(priv, new TypeNode(t), n, ps, body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("defun");
    }
  }

// #@@}

// #@@range/storage{
// 可以省略的static
  final public boolean storage() throws ParseException {
    trace_call("storage");
    try {
  Token t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        t = jj_consume_token(STATIC);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
                   {if (true) return (t == null ? false : true);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("storage");
    }
  }

// #@@}

// #@@range/storage{
// 形参声明
// 三种形式：
// 1.无参数(形参声明为void。如getc等)
// 2.定长参数(参数的个数是相同的。如puts或fgets等)
// 3.可变长参数(参数的个数不确定。如printf等)
  final public Params params() throws ParseException {
    trace_call("params");
    try {
    Token t;
    Params params;
      if (jj_2_3(2147483647)) {
        t = jj_consume_token(VOID);
            {if (true) return new Params(location(t), new ArrayList<Parameter>());}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case CHAR:
        case SHORT:
        case INT:
        case LONG:
        case STRUCT:
        case UNSIGNED:
          params = fixedparams();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 43:
            jj_consume_token(43);
            jj_consume_token(46);
                         params.acceptVarargs();
            break;
          default:
            jj_la1[8] = jj_gen;
            ;
          }
            {if (true) return params;}
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("params");
    }
  }

// #@@}

// #@@range/fixedparams{
// 定长参数
  final public Params fixedparams() throws ParseException {
    trace_call("fixedparams");
    try {
    List<Parameter> params = new ArrayList<Parameter>();
    Parameter param, param1;
      param1 = param();
                     params.add(param1);
      label_4:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(43);
        param = param();
                                       params.add(param);
      }
            {if (true) return new Params(param1.location(), params);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("fixedparams");
    }
  }

// #@@}

// #@@range/param{
  final public Parameter param() throws ParseException {
    trace_call("param");
    try {
    TypeNode t;
    String n;
      t = type();
      n = name();
                        {if (true) return new Parameter(t, n);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("param");
    }
  }

// #@@}

// #@@range/block{
// 函数定义的本体
  final public BlockNode block() throws ParseException {
    trace_call("block");
    try {
    Token t;
    List<DefinedVariable> vars;
    List<StmtNode> stmts;
      //由{}围着，以defvar_list()(临时变量定义列表)开始，接着是语句列表(stmts())
          t = jj_consume_token(47);
      vars = defvar_list();
      stmts = stmts();
      jj_consume_token(48);
            {if (true) return new BlockNode(location(t), vars, stmts);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("block");
    }
  }

// #@@}


// #@@range/defvar_list{
  final public List<DefinedVariable> defvar_list() throws ParseException {
    trace_call("defvar_list");
    try {
    List<DefinedVariable> result = new ArrayList<DefinedVariable>();
    List<DefinedVariable> vars;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case CHAR:
        case SHORT:
        case INT:
        case LONG:
        case STRUCT:
        case STATIC:
        case UNSIGNED:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        vars = defvars();
                       result.addAll(vars);
      }
            {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("defvar_list");
    }
  }

// #@@}

// #@@range/defstruct{
// 结构体定义
// 定义结构体和定义该结构体类型变量必须分开
  final public StructNode defstruct() throws ParseException {
    trace_call("defstruct");
    try {
    Token t;
    String n;
    List<Slot> membs;
      t = jj_consume_token(STRUCT);
      n = name();
      membs = member_list();
      jj_consume_token(44);
            {if (true) return new StructNode(location(t), new StructTypeRef(n), n, membs);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("defstruct");
    }
  }

// #@@}

/*
UnionNode defunion():
{
    Token t;
    String n;
    List<Slot> membs;
}
{
    t=<UNION> n=name() membs=member_list() ";"
        {
            return new UnionNode(location(t), new UnionTypeRef(n), n, membs);
        }
}
*/

// #@@range/member_list{
// 用于表示结构体或联合体成员
// 不支持对于一个类型可以用逗号分隔定义多个成员
// eg. int x,y;
// 只能 int x;
//      int y;
  final public List<Slot> member_list() throws ParseException {
    trace_call("member_list");
    try {
    List<Slot> membs = new ArrayList<Slot>();
    Slot s;
      jj_consume_token(47);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case CHAR:
        case SHORT:
        case INT:
        case LONG:
        case STRUCT:
        case UNSIGNED:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        s = slot();
        jj_consume_token(44);
                        membs.add(s);
      }
      jj_consume_token(48);
            {if (true) return membs;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("member_list");
    }
  }

// #@@}

// #@@range/slot{
  final public Slot slot() throws ParseException {
    trace_call("slot");
    try {
    TypeNode t;
    String n;
      t = type();
      n = name();
                        {if (true) return new Slot(t, n);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("slot");
    }
  }

// #@@}

// #@@range/funcdecl{
/*UndefinedFunction funcdecl():
{
    TypeRef ret;
    String n;
    Params ps;
}
{
    <EXTERN> ret=typeref() n=name() "(" ps=params() ")" ";"
        {
            TypeRef t = new FunctionTypeRef(ret, ps.parametersTypeRef());
            return new UndefinedFunction(new TypeNode(t), n, ps);
        }
}*/
// #@@}

/*UndefinedVariable vardecl():
{
    TypeNode t;
    String n;
}
{
    <EXTERN> t=type() n=name() ";"
        {
            return new UndefinedVariable(t, n);
        }
}
*/
// #@@range/type{
  final public TypeNode type() throws ParseException {
    trace_call("type");
    try {
  TypeRef ref;
      ref = typeref();
                    {if (true) return new TypeNode(ref);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type");
    }
  }

// #@@}

// #@@range/typeref{
  final public TypeRef typeref() throws ParseException {
    trace_call("typeref");
    try {
    TypeRef ref;
    Token t;
    ParamTypeRefs params;
      //在typeref_base()后添加任意数量的数组[]或指针*等符号
          ref = typeref_base();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
        case 49:
        case 51:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        if (jj_2_5(2)) {
          jj_consume_token(49);
          jj_consume_token(50);
            ref = new ArrayTypeRef(ref);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 49:
            jj_consume_token(49);
            t = jj_consume_token(INTEGER);
            jj_consume_token(50);
            ref = new ArrayTypeRef(ref, integerValue(t.image));
            break;
          case 51:
            jj_consume_token(51);
            ref = new PointerTypeRef(ref);
            break;
          case 41:
            jj_consume_token(41);
            params = param_typerefs();
            jj_consume_token(45);
            ref = new FunctionTypeRef(ref, params);
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
            {if (true) return ref;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("typeref");
    }
  }

// #@@}

// #@@range/param_typerefs{
  final public ParamTypeRefs param_typerefs() throws ParseException {
    trace_call("param_typerefs");
    try {
  ParamTypeRefs params;
      if (jj_2_6(2147483647)) {
        jj_consume_token(VOID);
            {if (true) return new ParamTypeRefs(new ArrayList<TypeRef>());}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case CHAR:
        case SHORT:
        case INT:
        case LONG:
        case STRUCT:
        case UNSIGNED:
          params = fixedparam_typerefs();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 43:
            jj_consume_token(43);
            jj_consume_token(46);
                          params.acceptVarargs();
            break;
          default:
            jj_la1[14] = jj_gen;
            ;
          }
            {if (true) return params;}
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("param_typerefs");
    }
  }

// #@@}

// #@@range/fixedparam_typerefs{
  final public ParamTypeRefs fixedparam_typerefs() throws ParseException {
    trace_call("fixedparam_typerefs");
    try {
    List<TypeRef> refs = new ArrayList<TypeRef>();
    TypeRef ref;
      ref = typeref();
                    refs.add(ref);
      label_8:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(43);
        ref = typeref();
                                       refs.add(ref);
      }
            {if (true) return new ParamTypeRefs(refs);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("fixedparam_typerefs");
    }
  }

// #@@}

// #@@range/typeref_base{
  final public TypeRef typeref_base() throws ParseException {
    trace_call("typeref_base");
    try {
    Token t, name;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        t = jj_consume_token(VOID);
                          {if (true) return new VoidTypeRef(location(t));}
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
                          {if (true) return IntegerTypeRef.charRef(location(t));}
        break;
      case SHORT:
        t = jj_consume_token(SHORT);
                          {if (true) return IntegerTypeRef.shortRef(location(t));}
        break;
      case INT:
        t = jj_consume_token(INT);
                          {if (true) return IntegerTypeRef.intRef(location(t));}
        break;
      case LONG:
        t = jj_consume_token(LONG);
                          {if (true) return IntegerTypeRef.longRef(location(t));}
        break;
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_8(2)) {
          t = jj_consume_token(UNSIGNED);
          jj_consume_token(CHAR);
          {if (true) return IntegerTypeRef.ucharRef(location(t));}
        } else if (jj_2_9(2)) {
          t = jj_consume_token(UNSIGNED);
          jj_consume_token(SHORT);
          {if (true) return IntegerTypeRef.ushortRef(location(t));}
        } else if (jj_2_10(2)) {
          t = jj_consume_token(UNSIGNED);
          jj_consume_token(INT);
          {if (true) return IntegerTypeRef.uintRef(location(t));}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNSIGNED:
            t = jj_consume_token(UNSIGNED);
            jj_consume_token(LONG);
          {if (true) return IntegerTypeRef.ulongRef(location(t));}
            break;
          case STRUCT:
            t = jj_consume_token(STRUCT);
            name = jj_consume_token(IDENTIFIER);
          {if (true) return new StructTypeRef(location(t), name.image);}
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("typeref_base");
    }
  }

// #@@}

// #@@range/typedef{
//typedef语句
/*TypedefNode typedef():
{
    Token t;
    TypeRef ref;
    Token newname;
}
{
    t=<TYPEDEF> ref=typeref() newname=<IDENTIFIER> ";"
        {
            addType(newname.image);
            return new TypedefNode(location(t), ref, newname.image);
        }
}*/
// #@@}

// #@@range/stmts{
// 语句的语法
// 简单的0个或多个stmt的排列
  final public List<StmtNode> stmts() throws ParseException {
    trace_call("stmts");
    try {
    List<StmtNode> ss = new ArrayList<StmtNode>();
    StmtNode s;
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case DO:
        case FOR:
        case RETURN:
        case BREAK:
        case CONTINUE:
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 41:
        case 44:
        case 47:
        case 51:
        case 74:
        case 77:
        case 78:
        case 81:
        case 82:
        case 83:
        case 84:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        s = stmt();
                if (s != null) ss.add(s);
      }
            {if (true) return ss;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("stmts");
    }
  }

// #@@}

// #@@range/stmt{
  final public StmtNode stmt() throws ParseException {
    trace_call("stmt");
    try {
    StmtNode n = null;
    ExprNode e = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
        break;
      default:
        jj_la1[19] = jj_gen;
        if (jj_2_11(2)) {
          n = labeled_stmt();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SIZEOF:
          case IDENTIFIER:
          case INTEGER:
          case CHARACTER:
          case STRING:
          case 41:
          case 51:
          case 74:
          case 77:
          case 78:
          case 81:
          case 82:
          case 83:
          case 84:
            e = expr();
            jj_consume_token(44);
                     n = new ExprStmtNode(e.location(), e);
            break;
          case 47:
            n = block();
            break;
          case IF:
            n = if_stmt();
            break;
          case WHILE:
            n = while_stmt();
            break;
          case DO:
            n = dowhile_stmt();
            break;
          case FOR:
            n = for_stmt();
            break;
          case BREAK:
            n = break_stmt();
            break;
          case CONTINUE:
            n = continue_stmt();
            break;
          case RETURN:
            n = return_stmt();
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
            {if (true) return n;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("stmt");
    }
  }

// #@@}
  final public LabelNode labeled_stmt() throws ParseException {
    trace_call("labeled_stmt");
    try {
    Token t;
    StmtNode n;
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(52);
      n = stmt();
            {if (true) return new LabelNode(location(t), t.image, n);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("labeled_stmt");
    }
  }

// #@@range/if_stmt{
// if语句
//大括号可以省
  final public IfNode if_stmt() throws ParseException {
    trace_call("if_stmt");
    try {
    Token t;
    ExprNode cond;
    StmtNode thenBody, elseBody = null;
      //LOOKAHEAD(1)为了防止空悬else的情况
          //stmt中包含了程序块block
          t = jj_consume_token(IF);
      jj_consume_token(41);
      cond = expr();
      jj_consume_token(45);
      thenBody = stmt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        elseBody = stmt();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
            {if (true) return new IfNode(location(t), cond, thenBody, elseBody);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("if_stmt");
    }
  }

// #@@}

// #@@range/while_stmt{
//while语句的语法
  final public WhileNode while_stmt() throws ParseException {
    trace_call("while_stmt");
    try {
    Token t;
    ExprNode cond;
    StmtNode body;
      t = jj_consume_token(WHILE);
      jj_consume_token(41);
      cond = expr();
      jj_consume_token(45);
      body = stmt();
            {if (true) return new WhileNode(location(t), cond, body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("while_stmt");
    }
  }

// #@@}
  final public DoWhileNode dowhile_stmt() throws ParseException {
    trace_call("dowhile_stmt");
    try {
    Token t;
    ExprNode cond;
    StmtNode body;
      t = jj_consume_token(DO);
      body = stmt();
      jj_consume_token(WHILE);
      jj_consume_token(41);
      cond = expr();
      jj_consume_token(45);
      jj_consume_token(44);
            {if (true) return new DoWhileNode(location(t), body, cond);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("dowhile_stmt");
    }
  }

//for语句语法
  final public ForNode for_stmt() throws ParseException {
    trace_call("for_stmt");
    try {
    Token t;
    ExprNode init = null, cond = null, incr = null;
    StmtNode body;
      t = jj_consume_token(FOR);
      jj_consume_token(41);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIZEOF:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case 41:
      case 51:
      case 74:
      case 77:
      case 78:
      case 81:
      case 82:
      case 83:
      case 84:
        init = expr();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIZEOF:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case 41:
      case 51:
      case 74:
      case 77:
      case 78:
      case 81:
      case 82:
      case 83:
      case 84:
        cond = expr();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(44);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIZEOF:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case 41:
      case 51:
      case 74:
      case 77:
      case 78:
      case 81:
      case 82:
      case 83:
      case 84:
        incr = expr();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(45);
      body = stmt();
            {if (true) return new ForNode(location(t), init, cond, incr, body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("for_stmt");
    }
  }

/*
SwitchNode switch_stmt():
{
    Token t;
    ExprNode cond;
    List<CaseNode> bodies;
}
{
    t=<SWITCH> "(" cond=expr() ")" "{" bodies=case_clauses() "}"
        {
            return new SwitchNode(location(t), cond, bodies);
        }
}
*/

/*List<CaseNode> case_clauses():
{
    List<CaseNode> clauses = new ArrayList<CaseNode>();
    CaseNode n;
}
{
    (n=case_clause() { clauses.add(n); })*
            [n=default_clause() { clauses.add(n); }]
        {
            return clauses;
        }
}*/

/*CaseNode case_clause():
{
    List<ExprNode> values;
    BlockNode body;
}
{
    values=cases() body=case_body()
        {
            return new CaseNode(body.location(), values, body);
        }
}*/

/*List<ExprNode> cases():
{
    List<ExprNode> values = new ArrayList<ExprNode>();
    ExprNode n;
}
{
    (<CASE> n=primary() ":" { values.add(n); })+
        {
            return values;
        }
}*/

/*CaseNode default_clause():
{ BlockNode body; }
{
    <DEFAULT_> ":" body=case_body()
        {
            return new CaseNode(body.location(), new ArrayList<ExprNode>(), body);
        }
}*/
  final public BlockNode case_body() throws ParseException {
    trace_call("case_body");
    try {
    LinkedList<StmtNode> stmts = new LinkedList<StmtNode>();
    StmtNode s;
      label_10:
      while (true) {
        s = stmt();
                if (s != null) stmts.add(s);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case DO:
        case FOR:
        case RETURN:
        case BREAK:
        case CONTINUE:
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 41:
        case 44:
        case 47:
        case 51:
        case 74:
        case 77:
        case 78:
        case 81:
        case 82:
        case 83:
        case 84:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_10;
        }
      }
            // last stmt of case clause must be break stmt.
            if (! (stmts.getLast() instanceof BreakNode)) {
                {if (true) throw new ParseException(
                  "missing break statement at the last of case clause");}
            }
            {if (true) return new BlockNode(stmts.get(0).location(),
                                 new ArrayList<DefinedVariable>(),
                                 stmts);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("case_body");
    }
  }

/*GotoNode goto_stmt():
{ Token t, name; }
{
    t=<GOTO> name=<IDENTIFIER> ";"
        {
            return new GotoNode(location(t), name.image);
        }
}*/

// #@@range/break_stmt{
// break语句
  final public BreakNode break_stmt() throws ParseException {
    trace_call("break_stmt");
    try {
  Token t;
      t = jj_consume_token(BREAK);
      jj_consume_token(44);
                    {if (true) return new BreakNode(location(t));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("break_stmt");
    }
  }

// #@@}
  final public ContinueNode continue_stmt() throws ParseException {
    trace_call("continue_stmt");
    try {
  Token t;
      t = jj_consume_token(CONTINUE);
      jj_consume_token(44);
                       {if (true) return new ContinueNode(location(t));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("continue_stmt");
    }
  }

//return语句
  final public ReturnNode return_stmt() throws ParseException {
    trace_call("return_stmt");
    try {
    Token t;
    ExprNode expr;
      if (jj_2_12(2)) {
        t = jj_consume_token(RETURN);
        jj_consume_token(44);
                                    {if (true) return new ReturnNode(location(t), null);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
          t = jj_consume_token(RETURN);
          expr = expr();
          jj_consume_token(44);
                                    {if (true) return new ReturnNode(location(t), expr);}
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("return_stmt");
    }
  }

// #@@range/expr{
// term()表示不包括二元运算符在内的单位“项”的非终端符号
// C语言中，赋值的左边可以用指针表示非常复杂的表达式，因此一般“项”可以位于赋值的左边
// opassign_op 表示复合赋值运算符,如"*=", "+="
// lhs:赋值的左边
// rhs:赋值的右边
  final public ExprNode expr() throws ParseException {
    trace_call("expr");
    try {
    ExprNode lhs, rhs, expr;
    String op;
      if (jj_2_13(2147483647)) {
        //普通的赋值表达式
              lhs = term();
        jj_consume_token(42);
        rhs = expr();
            {if (true) return new AssignNode(lhs, rhs);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 41:
        case 51:
        case 74:
        case 77:
        case 78:
        case 81:
        case 82:
        case 83:
        case 84:
          expr = expr10();
            {if (true) return expr;}
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr");
    }
  }

// #@@}

// #@@range/opassign_op{
// 复合赋值运算符
  final public String opassign_op() throws ParseException {
    trace_call("opassign_op");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
              {if (true) return "+";}
        break;
      case 54:
        jj_consume_token(54);
              {if (true) return "-";}
        break;
      case 55:
        jj_consume_token(55);
              {if (true) return "*";}
        break;
      case 56:
        jj_consume_token(56);
              {if (true) return "/";}
        break;
      case 57:
        jj_consume_token(57);
              {if (true) return "%";}
        break;
      case 58:
        jj_consume_token(58);
              {if (true) return "&";}
        break;
      case 59:
        jj_consume_token(59);
              {if (true) return "|";}
        break;
      case 60:
        jj_consume_token(60);
              {if (true) return "^";}
        break;
      case 61:
        jj_consume_token(61);
              {if (true) return "<<";}
        break;
      case 62:
        jj_consume_token(62);
              {if (true) return ">>";}
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("opassign_op");
    }
  }

// #@@}

// #@@range/expr10{
// javaCC会将1个规则转化为1个方法
// 如果规则中写有非终端符号(如expr9())，就会直接调用expr9方法。如果写的是终端符号，则直接转化为token
// expr10规则的左侧不能出现expr10自身或者以expr10开头的符号
  final public ExprNode expr10() throws ParseException {
    trace_call("expr10");
    try {
  ExprNode c, t, e;
      c = expr9();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 63:
        jj_consume_token(63);
        t = expr();
        jj_consume_token(52);
        e = expr10();
                      {if (true) return new CondExprNode(c, t, e);}
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
            {if (true) return c;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr10");
    }
  }

// #@@}

// #@@range/expr9{
  final public ExprNode expr9() throws ParseException {
    trace_call("expr9");
    try {
  ExprNode l, r;
      l = expr8();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 64:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_11;
        }
        jj_consume_token(64);
        r = expr8();
                                l = new BinaryOpNode(l, "||", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr9");
    }
  }

// #@@}

// #@@range/expr8{
  final public ExprNode expr8() throws ParseException {
    trace_call("expr8");
    try {
  ExprNode l, r;
      l = expr7();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 65:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_12;
        }
        jj_consume_token(65);
        r = expr7();
                                l = new BinaryOpNode(l, "&&", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr8");
    }
  }

// #@@}

// #@@range/expr7{
  final public ExprNode expr7() throws ParseException {
    trace_call("expr7");
    try {
  ExprNode l, r;
      l = expr6();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 66:
          jj_consume_token(66);
          r = expr6();
                                 l = new BinaryOpNode(l, ">", r);
          break;
        case 67:
          jj_consume_token(67);
          r = expr6();
                                 l = new BinaryOpNode(l, "<", r);
          break;
        case 68:
          jj_consume_token(68);
          r = expr6();
                                 l = new BinaryOpNode(l, ">=", r);
          break;
        case 69:
          jj_consume_token(69);
          r = expr6();
                                 l = new BinaryOpNode(l, "<=", r);
          break;
        case 70:
          jj_consume_token(70);
          r = expr6();
                                 l = new BinaryOpNode(l, "==", r);
          break;
        case 71:
          jj_consume_token(71);
          r = expr6();
                                 l = new BinaryOpNode(l, "!=", r);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr7");
    }
  }

// #@@}

// #@@range/expr6{
  final public ExprNode expr6() throws ParseException {
    trace_call("expr6");
    try {
  ExprNode l, r;
      l = expr5();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 72:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_14;
        }
        jj_consume_token(72);
        r = expr5();
                               l = new BinaryOpNode(l, "|", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr6");
    }
  }

// #@@}

// #@@range/expr5{
  final public ExprNode expr5() throws ParseException {
    trace_call("expr5");
    try {
  ExprNode l, r;
      l = expr4();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 73:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_15;
        }
        jj_consume_token(73);
        r = expr4();
                               l = new BinaryOpNode(l, "^", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr5");
    }
  }

// #@@}

// #@@range/expr4{
  final public ExprNode expr4() throws ParseException {
    trace_call("expr4");
    try {
  ExprNode l, r;
      l = expr3();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 74:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_16;
        }
        jj_consume_token(74);
        r = expr3();
                               l = new BinaryOpNode(l, "&", r);
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr4");
    }
  }

// #@@}

// #@@range/expr3{
  final public ExprNode expr3() throws ParseException {
    trace_call("expr3");
    try {
  ExprNode l, r;
      l = expr2();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 75:
        case 76:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 75:
          jj_consume_token(75);
          r = expr2();
                                 l = new BinaryOpNode(l, ">>", r);
          break;
        case 76:
          jj_consume_token(76);
          r = expr2();
                                 l = new BinaryOpNode(l, "<<", r);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr3");
    }
  }

// #@@}

// #@@range/expr2{
  final public ExprNode expr2() throws ParseException {
    trace_call("expr2");
    try {
  ExprNode l, r;
      l = expr1();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 77:
        case 78:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 77:
          jj_consume_token(77);
          r = expr1();
                                l = new BinaryOpNode(l, "+", r);
          break;
        case 78:
          jj_consume_token(78);
          r = expr1();
                                l = new BinaryOpNode(l, "-", r);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr2");
    }
  }

// #@@}

// #@@range/expr1{
  final public ExprNode expr1() throws ParseException {
    trace_call("expr1");
    try {
  ExprNode l, r;
      l = term();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
        case 79:
        case 80:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_19;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          jj_consume_token(51);
          r = term();
                              l = new BinaryOpNode(l, "*", r);
          break;
        case 79:
          jj_consume_token(79);
          r = term();
                              l = new BinaryOpNode(l, "/", r);
          break;
        case 80:
          jj_consume_token(80);
          r = term();
                              l = new BinaryOpNode(l, "%", r);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr1");
    }
  }

// #@@}

// #@@range/term{
// term()可以是带有类型转换运算符的term()或者unary
// term可以添加类型转换，而unary()则不能
  final public ExprNode term() throws ParseException {
    trace_call("term");
    try {
    TypeNode t;
    ExprNode n;
      if (jj_2_14(2147483647)) {
        jj_consume_token(41);
        t = type();
        jj_consume_token(45);
        n = term();
                                      {if (true) return new CastNode(t, n);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIZEOF:
        case IDENTIFIER:
        case INTEGER:
        case CHARACTER:
        case STRING:
        case 41:
        case 51:
        case 74:
        case 77:
        case 78:
        case 81:
        case 82:
        case 83:
        case 84:
          n = unary();
                                      {if (true) return n;}
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("term");
    }
  }

// #@@}

// #@@range/unary{
// 带有前置运算符的项的符号
  final public ExprNode unary() throws ParseException {
    trace_call("unary");
    try {
    ExprNode n;
    TypeNode t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 81:
        jj_consume_token(81);
        n = unary();
                          {if (true) return new PrefixOpNode("++", n);}
        break;
      case 82:
        jj_consume_token(82);
        n = unary();
                          {if (true) return new PrefixOpNode("--", n);}
        break;
      case 77:
        jj_consume_token(77);
        n = term();
                          {if (true) return new UnaryOpNode("+", n);}
        break;
      case 78:
        jj_consume_token(78);
        n = term();
                          {if (true) return new UnaryOpNode("-", n);}
        break;
      case 83:
        jj_consume_token(83);
        n = term();
                          {if (true) return new UnaryOpNode("!", n);}
        break;
      case 84:
        jj_consume_token(84);
        n = term();
                          {if (true) return new UnaryOpNode("~", n);}
        break;
      case 51:
        jj_consume_token(51);
        n = term();
                          {if (true) return new DereferenceNode(n);}
        break;
      case 74:
        jj_consume_token(74);
        n = term();
                          {if (true) return new AddressNode(n);}
        break;
      default:
        jj_la1[44] = jj_gen;
        if (jj_2_15(3)) {
          jj_consume_token(SIZEOF);
          jj_consume_token(41);
          t = type();
          jj_consume_token(45);
            {if (true) return new SizeofTypeNode(t, size_t());}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SIZEOF:
            jj_consume_token(SIZEOF);
            n = unary();
            {if (true) return new SizeofExprNode(n, size_t());}
            break;
          case IDENTIFIER:
          case INTEGER:
          case CHARACTER:
          case STRING:
          case 41:
            n = postfix();
                          {if (true) return n;}
            break;
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("unary");
    }
  }

// #@@}

// #@@range/postfix{
// 后置运算符规则
  final public ExprNode postfix() throws ParseException {
    trace_call("postfix");
    try {
    ExprNode expr, idx;
    String memb;
    List<ExprNode> args;
      expr = primary();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
        case 49:
        case 81:
        case 82:
        case 85:
        case 86:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 81:
          jj_consume_token(81);
                              expr = new SuffixOpNode("++", expr);
          break;
        case 82:
          jj_consume_token(82);
                              expr = new SuffixOpNode("--", expr);
          break;
        case 49:
          jj_consume_token(49);
          idx = expr();
          jj_consume_token(50);
                              expr = new ArefNode(expr, idx);
          break;
        case 85:
          jj_consume_token(85);
          memb = name();
                              expr = new MemberNode(expr, memb);
          break;
        case 86:
          jj_consume_token(86);
          memb = name();
                              expr = new PtrMemberNode(expr, memb);
          break;
        case 41:
          jj_consume_token(41);
          args = args();
          jj_consume_token(45);
                              expr = new FuncallNode(expr, args);
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return expr;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("postfix");
    }
  }

// #@@}

// #@@range/name{
// 非终端符号name和<IDENTIFIER>是相同的
// 将Token对象赋给了临时变量tok，并且返回tok中image属性的值作为name()的语义值
  final public String name() throws ParseException {
    trace_call("name");
    try {
  Token t;
      t = jj_consume_token(IDENTIFIER);
                     {if (true) return t.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("name");
    }
  }

// #@@}

// #@@range/args{
  final public List<ExprNode> args() throws ParseException {
    trace_call("args");
    try {
    List<ExprNode> args = new ArrayList<ExprNode>();
    ExprNode arg;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIZEOF:
      case IDENTIFIER:
      case INTEGER:
      case CHARACTER:
      case STRING:
      case 41:
      case 51:
      case 74:
      case 77:
      case 78:
      case 81:
      case 82:
      case 83:
      case 84:
        arg = expr();
                   args.add(arg);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 43:
            ;
            break;
          default:
            jj_la1[48] = jj_gen;
            break label_21;
          }
          jj_consume_token(43);
          arg = expr();
                        args.add(arg);
        }
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
            {if (true) return args;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("args");
    }
  }

// #@@}

// #@@range/primary{
// 字面量的规则
//非终端符号primary是数值、字符、字符串的字面量、变量以及用括号括起来的表达式中的任意一者
//这里为各个选项省对应的节点对象
//最小的单位
//除最后，一般stmt->expr->term->primary
  final public ExprNode primary() throws ParseException {
    trace_call("primary");
    try {
    Token t;
    ExprNode n;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
            {if (true) return integerNode(location(t), t.image);}
        break;
      case CHARACTER:
        t = jj_consume_token(CHARACTER);
            {if (true) return new IntegerLiteralNode(location(t),
                                          IntegerTypeRef.charRef(),
                                          characterCode(t.image));}
        break;
      case STRING:
        t = jj_consume_token(STRING);
            {if (true) return new StringLiteralNode(location(t),
                new PointerTypeRef(IntegerTypeRef.charRef()),
                stringValue(t.image));}
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
            {if (true) return new VariableNode(location(t), t.image);}
        break;
      case 41:
        jj_consume_token(41);
        n = expr();
        jj_consume_token(45);
            {if (true) return n;}
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("primary");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(76)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(75)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_76()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_99()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(70)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(43)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_87()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(VOID)) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_86()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_76()) return true;
    if (jj_scan_token(52)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(86)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(85)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(49)) return true;
    if (jj_3R_76()) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(VOID)) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_scan_token(41)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(84)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(42)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(83)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(78)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(82)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(81)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(45)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(80)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(79)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(78)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_27()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_22()) return true;
    if (jj_3R_28()) return true;
    if (jj_3R_31()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(44)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[51];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4800,0x4800,0x16fc0,0x4800,0x0,0x0,0x0,0x2000,0x0,0x10fc0,0x12fc0,0x10fc0,0x0,0x0,0x0,0x10fc0,0x7c0,0x10800,0x1ff20000,0x0,0x1ff20000,0x40000,0x1c000000,0x1c000000,0x1c000000,0x1ff20000,0x800000,0x1c000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1c000000,0x0,0x1c000000,0x0,0x0,0x0,0x1c000000,0x18000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x400,0x800,0x400,0x0,0x800,0x0,0x0,0x0,0xa0200,0xa0200,0x800,0x0,0x0,0x0,0x89308,0x1000,0x88308,0x0,0x80308,0x80308,0x80308,0x89308,0x0,0x80308,0x7fe00000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0x80308,0x80000,0x308,0x20200,0x20200,0x800,0x80308,0x308,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1e6400,0x0,0x1e6400,0x0,0x1e6400,0x1e6400,0x1e6400,0x1e6400,0x0,0x1e6400,0x0,0x0,0x1,0x2,0xfc,0xfc,0x100,0x200,0x400,0x1800,0x1800,0x6000,0x6000,0x18000,0x18000,0x1e6400,0x1e6400,0x0,0x660000,0x660000,0x0,0x1e6400,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[15];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[87];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 51; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 87; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

    // #@@}
}
