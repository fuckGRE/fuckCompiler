/* Generated By:JJTree&JavaCC: Do not edit this line. FuckC.java */
package pkg;
import java.util.*;
import java.io.*;

public class FuckC extends Exception/*@bgen(jjtree)*/implements FuckCTreeConstants, FuckCConstants {/*@bgen(jjtree)*/
  protected static JJTFuckCState jjtree = new JJTFuckCState();private static String symtab[][]=new String [100][8];
  private static String temp[]=new String [8];
  private static int n_arg=0;
  private static String switch_expr;
  private static int label=0;
  private static int label_stack[]=new int[100];
  private static int label_pos=0;

  private static int symtab_pos=0;
  private static int pointer_level=0;
  private static int var_size=1;
  private static String arr[]=new String[500];
  private static int top=0;
  private static int i=0;
  private static PrintWriter pr,pr_sym;
  private static void assign()
  {

    pr.write("t"+i+"="+arr[top-3]+arr[top-2]+arr[top-1]+"\u005cn");
    top-=3;
    arr[top++]="t"+i;
    i++;
  }

  private static boolean check_redeclaration(String a)
   {

     for(int i=0;i<symtab_pos;i++)
     {
       if(a.equals(symtab[i][0]))
         return true;
     }
   return false;
   }

   private static boolean check_declaration(String a)
   {

    for(int i=0;i<symtab_pos;i++)
     {

       if(a.equals(symtab[i][0]))
         return true;
     }
   return false;

   }


  private static void u_assign()
  {
    pr.write("t"+i+"="+arr[top-2]+arr[top-1]+"\u005cn");
    top-=2;
    arr[top++]="t"+i;
    i++;
  }

  private static void assign_var(String tem)
  {

    pr.write(tem+"="+arr[top-1]+"\u005cn");
    top-=1;
    arr[top++]=tem;

  }

  private static void var_assign()
  {
   String t=arr[top-3];
   pr.write(arr[top-3]+arr[top-2]+arr[top-1]+"\u005cn");
   top-=3;
   arr[top++]=t;
  }

  private static void display_symtab() throws Exception
  {


    for(int i=0;i<symtab_pos;i++)
    {
     pr_sym.print(symtab[i][0]+" "+symtab[i][1]+" "+symtab[i][2]+" "+symtab[i][3]+" "+symtab[i][4]+" "+
      symtab[i][5]+" "+symtab[i][6]+" \u005cn");
    }

}

  public static void main(String args []) throws ParseException, IOException, Exception
  {

     FuckC parser =new FuckC(new FileInputStream("input.txt"));

     pr=new PrintWriter("output.txt");
     pr_sym=new PrintWriter("symtab.txt");
    //while (true)
    {
    System.out.println("PCD_PACK_1 Reading from file ...");

      try
      {
        SimpleNode n = FuckC.Start();
        if(n != null)
         {
            n.dump(">>");
            System.out.println("OK.");
                      pr.close();
                      pr_sym.close();
          }
          else System.out.println("Goodbye.");
/*        switch (FuckC.top_unit())
        {
          case 0 :
          System.out.println("OK.");
          pr.close();
          pr_sym.close();
          break;
          case 1 :
          System.out.println("Goodbye.");
          break;
          default :
          break;
        }*/
      }
      catch(ParseException e){
        System.out.println("C Parser Version 0.1Alpha:  Encountered errors during parse.");
        e.printStackTrace();
      }

          catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        FuckC.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        //break;
      }
    }
  }

  static final public SimpleNode Start() throws ParseException, Exception {
                                     /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      top_unit();
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

//Top unit
  static final public int top_unit() throws ParseException, Exception {
 /*@bgen(jjtree) top_unit */
  SimpleNode jjtn000 = new SimpleNode(JJTTOP_UNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        var_fun();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC:
        case VOID:
        case CHAR:
        case INT:
        case FLOAT:
        case DOUBLE:
        case CONST:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctAccepted \u005cn");
    //throw new ParseException("Redeclaration");
    display_symtab();
      symtab_pos=0;
        {if (true) return 0;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   if (jjte000 instanceof Exception) {
     {if (true) throw (Exception)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

//Declarations
  static final public void var_fun() throws ParseException, Exception {
 /*@bgen(jjtree) var_fun */
 SimpleNode jjtn000 = new SimpleNode(JJTVAR_FUN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      if (jj_2_1(2147483647)) {
        fun_def();
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 System.out.print("\u005ct\u005ct\u005ctEx Declaration \u005cn");
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC:
        case VOID:
        case CHAR:
        case INT:
        case FLOAT:
        case DOUBLE:
          var_def();
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;

          break;
        case CONST:
          const_def();
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;

          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    if (jjte000 instanceof Exception) {
      {if (true) throw (Exception)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//函数定义
  static final public void fun_def() throws ParseException, Exception {
 /*@bgen(jjtree) fun_def */
    SimpleNode jjtn000 = new SimpleNode(JJTFUN_DEF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      storage();
      type_specifiers();
      System.out.print("\u005ct\u005ct\u005ctPrevious sym tab: \u005cn");
      display_symtab();
      symtab_pos=0;
      t = jj_consume_token(IDENTIFIER);
                    jjtn000.setText( t.image );
                   symtab[symtab_pos][0]=t.image; symtab[symtab_pos][2]="fun";
                  symtab_pos++; //System.out.print("\t\t\tIDENT\n");

      jj_consume_token(43);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case CHAR:
      case INT:
      case FLOAT:
      case DOUBLE:
        param_type_list();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(44);
                 symtab[symtab_pos-n_arg-1][3]=n_arg+"";
                 n_arg=0;
      block();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   System.out.print("\u005ct\u005ct\u005ctFunction definition\u005cn");
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

// 变量定义的语法
  static final public void var_def() throws ParseException {
 /*@bgen(jjtree) var_def */
 SimpleNode jjtn000 = new SimpleNode(JJTVAR_DEF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String s1;
    try {
      storage();
      type_specifiers();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
      case 53:
        ptr_arr();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      s1 = name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
        expr();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
        jjtn000.setText( s1 );
//            TODO

      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 46:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        jj_consume_token(46);
        name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 45:
          jj_consume_token(45);
          expr();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }

      }
      jj_consume_token(47);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// #@@}

//常量定义
  static final public void const_def() throws ParseException {
 /*@bgen(jjtree) const_def */
    SimpleNode jjtn000 = new SimpleNode(JJTCONST_DEF);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CONST);
      type_specifiers();
      name();
      jj_consume_token(45);
      expr();
      jj_consume_token(47);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        jjtn000.setText( t.image );
//            TODO

    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Parameter type list
  static final public void param_type_list() throws ParseException {
                          /*@bgen(jjtree) param_type_list */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAM_TYPE_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      param_list();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctParameter type List\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Parameter List
  static final public void param_list() throws ParseException {
                     /*@bgen(jjtree) param_list */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAM_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      param_decl();
      label_3:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(46);
        param_decl();
      }
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctParameter List\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Parameter declaration
  static final public void param_decl() throws ParseException {
 /*@bgen(jjtree) param_decl */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAM_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type_specifiers();
      decl();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctParameter declaration\u005cn");
       symtab_pos++;
       n_arg++;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Compound statement
  static final public void block() throws ParseException {
                /*@bgen(jjtree) block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(48);
      if (jj_2_3(2147483647)) {
        decl_list();
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case CASE:
      case DFLT:
      case IF:
      case SWITCH:
      case WHILE:
      case FOR:
      case DO:
      case GOTO:
      case CONTINUE:
      case BREAK:
      case RETURN:
      case IDENTIFIER:
      case 43:
      case 47:
      case 48:
      case 53:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
        stmt_list();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(49);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctCompound statement\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//statement list
  static final public void stmt_list() throws ParseException {
                    /*@bgen(jjtree) stmt_list */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        stmt();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case CASE:
        case DFLT:
        case IF:
        case SWITCH:
        case WHILE:
        case FOR:
        case DO:
        case GOTO:
        case CONTINUE:
        case BREAK:
        case RETURN:
        case IDENTIFIER:
        case 43:
        case 47:
        case 48:
        case 53:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctstatement list\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Statement
  static final public void stmt() throws ParseException {
               /*@bgen(jjtree) stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(2)) {
        case_default_stmt();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 43:
        case 47:
        case 53:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
          expr_stmt();
          break;
        case 48:
          block();
          break;
        case IF:
        case SWITCH:
          if_switch_stmt();
          break;
        case WHILE:
        case FOR:
        case DO:
          while_for_stmt();
          break;
        case GOTO:
        case CONTINUE:
        case BREAK:
        case RETURN:
          jump_stmt();
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctStatement\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//if and switch
  static final public void if_switch_stmt() throws ParseException {
 /*@bgen(jjtree) if_switch_stmt */
    SimpleNode jjtn000 = new SimpleNode(JJTIF_SWITCH_STMT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        t = jj_consume_token(IF);
        jj_consume_token(43);
        expr();
        jj_consume_token(44);
               jjtn000.setText( t.image );
              label_stack[label_pos++]=label++;
                 pr.write("\u005cnif (not "+arr[top-1]+") \u005cngoto false_"+label_stack[label_pos-1]+"\u005cn");

                //label_count++;

        stmt();
                  pr.write("goto end_"+label_stack[label_pos-1]+"\u005cn");
                   pr.write("false_"+label_stack[label_pos-1]+":\u005cn");
        if (jj_2_5(2)) {
          t = jj_consume_token(ELSE);
          stmt();
        } else {
          ;
        }
                    jjtn000.setText( t.image );
                  pr.write("end_"+label_stack[label_pos-1]+":\u005cn");
                  label_pos--;
        break;
      case SWITCH:
        t = jj_consume_token(SWITCH);
        jj_consume_token(43);
        expr();
        jjtn000.setText( t.image );
        switch_expr=arr[top-1];
        label_stack[label_pos++]=label++;
        jj_consume_token(44);
        stmt();
         pr.print("end_"+label_stack[label_pos-1]+"\u005cn");
        label_pos--;
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      System.out.println("\u005ct\u005ct\u005ctSelection statement ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//case && default
  static final public void case_default_stmt() throws ParseException {
                            /*@bgen(jjtree) case_default_stmt */
                            SimpleNode jjtn000 = new SimpleNode(JJTCASE_DEFAULT_STMT);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(50);
       jjtn000.setText( t.image );
       pr.write(t.image+":\u005cn");
        stmt();
        break;
      case CASE:
        t = jj_consume_token(CASE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          t = jj_consume_token(INTEGER_LITERAL);
          break;
        case CHARACTER_LITERAL:
          t = jj_consume_token(CHARACTER_LITERAL);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(50);
      jjtn000.setText( t.image );
        label_stack[label_pos++]=label++;
        pr.write("t="+t.image+"\u005cn");
        pr.write("t="+switch_expr+"=="+t.image+"\u005cn");
        pr.write("if(not t)\u005cn");
        pr.write("goto end_"+label_stack[label_pos-1]+"\u005cn");
        stmt();
        pr.write("end_"+label_stack[label_pos-1]+"\u005cn");
        label_pos--;
        break;
      case DFLT:
        t = jj_consume_token(DFLT);
        jj_consume_token(50);
      jjtn000.setText( t.image );
          pr.write("default: \u005cn");
        stmt();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      System.out.println("\u005ct\u005ct\u005ctLabeled statement ");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//while , do…while, for
  static final public void while_for_stmt() throws ParseException {
 /*@bgen(jjtree) while_for_stmt */
    SimpleNode jjtn000 = new SimpleNode(JJTWHILE_FOR_STMT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        t = jj_consume_token(WHILE);
        jj_consume_token(43);
        expr();
        jj_consume_token(44);
        jjtn000.setText( t.image );
      label_stack[label_pos++]=label++;
       pr.write("begin_"+label_stack[label_pos-1]+":\u005cn");
       pr.write("if (not "+arr[top-1]+")\u005cn");
       pr.write("goto end_"+label_stack[label_pos-1]+"\u005cn");
        stmt();
      pr.write("goto begin_"+label_stack[label_pos-1]+"\u005cn");
      pr.write("end_"+label_stack[label_pos-1]+"\u005cn");
      label_pos--;
        break;
      case DO:
        t = jj_consume_token(DO);
      jjtn000.setText( t.image );
      label_stack[label_pos++]=label++;
       pr.write("begin_"+label_stack[label_pos-1]+":\u005cn");
        stmt();
        t = jj_consume_token(WHILE);
        jj_consume_token(43);
        expr();
        jj_consume_token(44);
        jj_consume_token(47);
        jjtn000.setText( t.image );
        pr.write("if ("+arr[top-1]+")\u005cn");
        pr.write("goto begin_"+label_stack[label_pos-1]+"\u005cn");
        pr.write("end_"+label_stack[label_pos-1]+":\u005cn");
        label_pos--;
        break;
      case FOR:
        t = jj_consume_token(FOR);
        jj_consume_token(43);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 43:
        case 53:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
          expr();
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(47);
      jjtn000.setText( t.image );
      label_stack[label_pos++]=label++;
      pr.write("begin_"+label_stack[label_pos-1]+"\u005cn");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 43:
        case 53:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
          expr();
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
        pr.write("if(not "+arr[top-1]+")\u005cn");
        pr.write("goto end_"+label_stack[label_pos-1]+"\u005cn");
        jj_consume_token(47);
        pr.write("goto body_"+label_stack[label_pos-1]+"\u005cn");

        pr.write("inc_"+label_stack[label_pos-1]+":\u005cn");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 43:
        case 53:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
          expr();
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        jj_consume_token(44);
        pr.write("goto begin_"+label_stack[label_pos-1]+"\u005cn");
        pr.write("body_"+label_stack[label_pos-1]+":\u005cn");
        stmt();
        pr.write("goto inc_"+label_stack[label_pos-1]+"\u005cn");
        pr.write("end_"+label_stack[label_pos-1]+"\u005cn");
        label_pos--;
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      System.out.println("\u005ct\u005ct\u005ctIteration statement ");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//goto & continue & return & break
  static final public void jump_stmt() throws ParseException {
 /*@bgen(jjtree) jump_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTJUMP_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GOTO:
        jj_consume_token(GOTO);
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(47);
    jjtn000.setText( t.image );
    pr.write("goto "+t.image+"\u005cn");
        break;
      case CONTINUE:
        jj_consume_token(CONTINUE);
        jj_consume_token(47);
        pr.write("goto begin_"+label_stack[label_pos-1]+"\u005cn");
        break;
      case BREAK:
        jj_consume_token(BREAK);
        jj_consume_token(47);
        pr.write("goto end_"+label_stack[label_pos-1]+"\u005cn");
        break;
      case RETURN:
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case 43:
        case 53:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
          expr();
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        jj_consume_token(47);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      System.out.println("\u005ct\u005ct\u005ctJump statement ");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//constant expression
  static final public void constant_expr() throws ParseException {
                        /*@bgen(jjtree) constant_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      cond_expr();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctConstant expression\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//expression statement
  static final public void expr_stmt() throws ParseException {
                    /*@bgen(jjtree) expr_stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 43:
      case 53:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
        expr();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(47);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctExpression statement\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//expression
  static final public void expr() throws ParseException {
 /*@bgen(jjtree) expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      assign_expr();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 46:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_5;
        }
        jj_consume_token(46);
        assign_expr();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctExpression\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Declation list
  static final public void decl_list() throws ParseException {
                    /*@bgen(jjtree) decl_list */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_6:
      while (true) {
        decls();
        if (jj_2_6(2147483647)) {
          ;
        } else {
          break label_6;
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctDeclaration list\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void decls() throws ParseException {
 /*@bgen(jjtree) decls */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      decl_specifiers();
      init_decl_list();
      jj_consume_token(47);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctDeclaration specifiers\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Declation specifiers
  static final public void decl_specifiers() throws ParseException {
 /*@bgen(jjtree) decl_specifiers */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL_SPECIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        storage_specifiers();
        if (jj_2_7(2147483647)) {
          decl_specifiers();
        } else {
          ;
        }
        break;
      case SHORT:
      case LONG:
      case SIGNED:
      case UNSIGNED:
        type_modifiers();
        if (jj_2_8(2147483647)) {
          decl_specifiers();
        } else {
          ;
        }
        break;
      case VOID:
      case CHAR:
      case INT:
      case FLOAT:
      case DOUBLE:
        type_specifiers();
        if (jj_2_9(2147483647)) {
          decl_specifiers();
        } else {
          ;
        }
        break;
      case CONST:
      case VOLATILE:
        type_qualifiers();
        if (jj_2_10(2147483647)) {
          decl_specifiers();
        } else {
          ;
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctDeclaration specifier\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void storage() throws ParseException {
                 /*@bgen(jjtree) storage */
                 SimpleNode jjtn000 = new SimpleNode(JJTSTORAGE);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        t = jj_consume_token(STATIC);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        if(t != null)
            {
            jjtn000.setText( t.image );
          symtab[symtab_pos][4]=t.image;
          temp[4]=t.image;
          System.out.print("\u005ct\u005ct\u005ctStorage class specifiers \u005cn");
          }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//Storage class specifiers
  static final public void storage_specifiers() throws ParseException {
                             /*@bgen(jjtree) storage_specifiers */
                             SimpleNode jjtn000 = new SimpleNode(JJTSTORAGE_SPECIFIERS);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      t = jj_consume_token(STATIC);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {
        jjtn000.setText( t.image );
      symtab[symtab_pos][4]=t.image;
      temp[4]=t.image;
      System.out.print("\u005ct\u005ct\u005ctStorage class specifiers \u005cn");
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Type modifiers
  static final public void type_modifiers() throws ParseException {
 /*@bgen(jjtree) type_modifiers */
 SimpleNode jjtn000 = new SimpleNode(JJTTYPE_MODIFIERS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHORT:
        t = jj_consume_token(SHORT);
        break;
      case LONG:
        t = jj_consume_token(LONG);
        break;
      case SIGNED:
        t = jj_consume_token(SIGNED);
        break;
      case UNSIGNED:
        t = jj_consume_token(UNSIGNED);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setText( t.image );
      symtab[symtab_pos][2]=t.image;
      temp[2]=t.image;

        System.out.print("\u005ct\u005ct\u005ctType modifiers. \u005cn");
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

//Type specifiers
  static final public void type_specifiers() throws ParseException {
 /*@bgen(jjtree) type_specifiers */
 SimpleNode jjtn000 = new SimpleNode(JJTTYPE_SPECIFIERS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        t = jj_consume_token(VOID);
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
        break;
      case INT:
        t = jj_consume_token(INT);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setText( t.image );
      symtab[symtab_pos][1]=t.image;
      temp[1]=t.image;

        System.out.print("\u005ct\u005ct\u005ctType specifiers. \u005cn");
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Type Qualifiers
  static final public void type_qualifiers() throws ParseException {
                          /*@bgen(jjtree) type_qualifiers */
                          SimpleNode jjtn000 = new SimpleNode(JJTTYPE_QUALIFIERS);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        t = jj_consume_token(CONST);
        break;
      case VOLATILE:
        t = jj_consume_token(VOLATILE);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        jjtn000.setText( t.image );
      symtab[symtab_pos][3]=t.image;
      temp[3]=t.image;

      System.out.println("\u005ct\u005ct\u005ctType qualifiers ");
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Init declarator list
  static final public void init_decl_list() throws ParseException {
 /*@bgen(jjtree) init_decl_list */
  SimpleNode jjtn000 = new SimpleNode(JJTINIT_DECL_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      init_decl();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 46:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_7;
        }
        jj_consume_token(46);
        init_decl();
       symtab[symtab_pos][1]=symtab[symtab_pos-1][1];
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctInit declarator list\u005cn");
         for(int i=0;i<7;i++)
       {

          temp[i]=null;
       }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Init declarator
  static final public void init_decl() throws ParseException {
 /*@bgen(jjtree) init_decl */
 SimpleNode jjtn000 = new SimpleNode(JJTINIT_DECL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      decl();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
        init();
         System.out.print("\u005ct\u005ct\u005ctInit declarator\u005cn");
          assign_var(symtab[symtab_pos][0]);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
         if(symtab[symtab_pos][4]==null) symtab[symtab_pos][4]="auto";
         if(symtab[symtab_pos][3]==null) symtab[symtab_pos][3]="volatile";
         symtab_pos++;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Declarator
  static final public void decl() throws ParseException {
               /*@bgen(jjtree) decl */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
      case 53:
        ptr_arr();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      direct_decl();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctDeclarator\u005cn");
      pointer_level=0;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Direct Declarator
  static final public void direct_decl() throws ParseException {
                    /*@bgen(jjtree) direct_decl */
                    SimpleNode jjtn000 = new SimpleNode(JJTDIRECT_DECL);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t=null,t1=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        jjtn000.setText( t.image );
       if(check_redeclaration(t.image))
       {if (true) throw new ParseException("error: redeclaration of '"+symtab[symtab_pos][1]+" "+t.image+"'");}
        break;
      case 43:
        jj_consume_token(43);
        decl();
        jj_consume_token(44);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
       for(int i=1;i<5;i++)
       {
         if(temp[i]!=null)
          symtab[symtab_pos][i]=temp[i];
        }
        symtab[symtab_pos][0]=t.image;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_8;
        }
        jj_consume_token(51);
        t1 = jj_consume_token(INTEGER_LITERAL);
                                 var_size*=Integer.parseInt(t1.image);
        jj_consume_token(52);
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
          symtab[symtab_pos][5]=var_size+"";
          if(symtab[symtab_pos][1]!=null)
          {
            switch(symtab[symtab_pos][1])
            {
              case "int":
                  symtab[symtab_pos][5]=(var_size*4)+"";
                  break;
              case "float":
                  symtab[symtab_pos][5]=(var_size*4)+"";
                  break;
              case "double":
                  symtab[symtab_pos][5]=(var_size*8)+"";
                  break;
              case "char":
                  symtab[symtab_pos][5]=(var_size*1)+"";
                  break;
            }
            var_size=1;

          }

          System.out.print("\u005ct\u005ct\u005ctDirect Declarator\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Pointer
  static final public void ptr_arr() throws ParseException {
   /*@bgen(jjtree) ptr_arr */
    SimpleNode jjtn000 = new SimpleNode(JJTPTR_ARR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);pointer_level++;
    Token t;
    try {
      if (jj_2_11(2)) {
        jj_consume_token(51);
        t = jj_consume_token(INTEGER_LITERAL);
        jj_consume_token(52);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
                jjtn000.setText( t.image );
//               TODO

      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          jj_consume_token(53);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     symtab[symtab_pos][6]=pointer_level+"";

     System.out.print("\u005ct\u005ct\u005ctPointer. \u005cn");
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Initializer
  static final public void init() throws ParseException {
 /*@bgen(jjtree) init */
  SimpleNode jjtn000 = new SimpleNode(JJTINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      assign_expr();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctInitializer\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Initializer list
  static final public void init_list() throws ParseException {
 /*@bgen(jjtree) init_list */
  SimpleNode jjtn000 = new SimpleNode(JJTINIT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      init();
      label_9:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(46);
        init();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctInitializer list\u005cn");
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

//Assignment Expression
  static final public void assign_expr() throws ParseException {
 /*@bgen(jjtree) assign_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_13(2147483647)) {
        unary_expr();
        assign_operator();
      if(arr[top-1]=="=")
       {
         if(arr[top-2].charAt(0)<65)
         {
           {if (true) throw new ParseException("error: lvalue required as left operand of assignment");}
         }
       }
        assign_expr();
                      var_assign();
      } else if (jj_2_14(3)) {
        cond_expr();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    System.out.print("\u005ct\u005ct\u005ctAssignment expression\u005cn");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//Assignment operator
  static final public void assign_operator() throws ParseException {
 /*@bgen(jjtree) assign_operator */
 SimpleNode jjtn000 = new SimpleNode(JJTASSIGN_OPERATOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        t = jj_consume_token(45);
      arr[top++]=t.image;
        break;
      case 54:
        t = jj_consume_token(54);
      arr[top++]="="+arr[top-2]+"*";
        break;
      case 55:
        t = jj_consume_token(55);
      arr[top++]="="+arr[top-2]+"/";
        break;
      case 56:
        t = jj_consume_token(56);
      arr[top++]="="+arr[top-2]+"%";
        break;
      case 57:
        t = jj_consume_token(57);
      arr[top++]="="+arr[top-2]+"+";
        break;
      case 58:
        t = jj_consume_token(58);
      arr[top++]="="+arr[top-2]+"-";
        break;
      case 59:
        t = jj_consume_token(59);
      arr[top++]="="+arr[top-2]+"<< ";
        break;
      case 60:
        t = jj_consume_token(60);
      arr[top++]="="+arr[top-2]+">>";
        break;
      case 61:
        t = jj_consume_token(61);
      arr[top++]="="+arr[top-2]+"&";
        break;
      case 62:
        t = jj_consume_token(62);
      arr[top++]="="+arr[top-2]+"^";
        break;
      case 63:
        t = jj_consume_token(63);
      arr[top++]="="+arr[top-2]+"|";
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctAssignment operator\u005cn");
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Unary expression
  static final public void unary_expr() throws ParseException {
                     /*@bgen(jjtree) unary_expr */
                     SimpleNode jjtn000 = new SimpleNode(JJTUNARY_EXPR);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      if (jj_2_15(3)) {
        postfix_expr();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 64:
          t = jj_consume_token(64);
               arr[top++]="1+";
          unary_expr();
                                               String t1=arr[top-1]; u_assign(); assign_var(t1);
          break;
        case 65:
          t = jj_consume_token(65);
               arr[top++]="1-";
          unary_expr();
                                                t1=arr[top-1]; u_assign(); assign_var(t1);
          break;
        case 66:
          t = jj_consume_token(66);
              arr[top++]="-";
          unary_expr();
                                              t1=arr[top-1]; u_assign();
          break;
        case 67:
          t = jj_consume_token(67);
              arr[top++]="&";
          unary_expr();
                                              t1=arr[top-1]; u_assign();
          break;
        case 53:
          t = jj_consume_token(53);
              arr[top++]="*";
          unary_expr();
                                              t1=arr[top-1]; u_assign();
          break;
        case 68:
          t = jj_consume_token(68);
              arr[top++]="~";
          unary_expr();
                                              t1=arr[top-1]; u_assign();
          break;
        case 69:
          t = jj_consume_token(69);
              arr[top++]="!";
          unary_expr();
                                              t1=arr[top-1]; u_assign();
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      System.out.println("\u005ct\u005ct\u005ctUnary expression ");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//Postfix expression
  static final public void postfix_expr() throws ParseException {
                       /*@bgen(jjtree) postfix_expr */
                       SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIX_EXPR);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      prefix_expr();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
        case 64:
        case 65:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          jj_consume_token(51);
          expr();
          jj_consume_token(52);
                                                         //System.out.print("\t "+arr[top-2]+arr[top-1]+"\n");
                                             arr[top-1]=arr[top-2]+"+"+arr[top-1];
          break;
        case 64:
          t = jj_consume_token(64);
                                   arr[top++]="+1"; String t1=arr[top-2]; u_assign(); assign_var(t1);
          break;
        case 65:
          t = jj_consume_token(65);
                                   arr[top++]="-1";  t1=arr[top-2]; u_assign(); assign_var(t1);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctPostfix expression\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//prefix expression
  static final public void prefix_expr() throws ParseException {
                      /*@bgen(jjtree) prefix_expr */
                      SimpleNode jjtn000 = new SimpleNode(JJTPREFIX_EXPR);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                      if(!check_declaration(t.image))
                      {if (true) throw new ParseException("error: '"+t.image+"' was not declared in this scope");}

                         arr[top++]=t.image;
        break;
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        constant();
        break;
      case 43:
        jj_consume_token(43);
        expr();
        jj_consume_token(44);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctPrimary expression\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//conditional expression
  static final public void cond_expr() throws ParseException {
 /*@bgen(jjtree) cond_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTCOND_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      logical_or_expr();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      System.out.print("\u005ct\u005ct\u005ctConditional expression\u005cn");
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//logical or expression
  static final public void logical_or_expr() throws ParseException {
                          /*@bgen(jjtree) logical_or_expr */
                          SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_OR_EXPR);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      logical_and_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 70:
        t = jj_consume_token(70);
                                  arr[top++]=t.image;
        logical_or_expr();
      System.out.print("\u005ct\u005ct\u005ctLogical OR expression\u005cn");
      assign();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//logical and expression
  static final public void logical_and_expr() throws ParseException {
 /*@bgen(jjtree) logical_and_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_AND_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      Inclusive_or_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        t = jj_consume_token(71);
                                  arr[top++]=t.image;
        logical_and_expr();
      System.out.print("\u005ct\u005ct\u005ctLogical And expression\u005cn");
      assign();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

//Inclusive Or expression
  static final public void Inclusive_or_expr() throws ParseException {
 /*@bgen(jjtree) Inclusive_or_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTINCLUSIVE_OR_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      exclusive_or_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        t = jj_consume_token(72);
                                 arr[top++]=t.image;
        Inclusive_or_expr();
      System.out.print("\u005ct\u005ct\u005ctInclusive OR expression\u005cn");
      assign();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

//Exclusive Or expression
  static final public void exclusive_or_expr() throws ParseException {
 /*@bgen(jjtree) exclusive_or_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXCLUSIVE_OR_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      and_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
        t = jj_consume_token(73);
                       arr[top++]=t.image;
        exclusive_or_expr();
      System.out.print("\u005ct\u005ct\u005ctExclusive OR expression\u005cn");
          assign();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//And expression
  static final public void and_expr() throws ParseException {
 /*@bgen(jjtree) and_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTAND_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      equal_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        t = jj_consume_token(67);
                           arr[top++]=t.image;
        and_expr();
      System.out.print("\u005ct\u005ct\u005ctAnd expression\u005cn");
              assign();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

//equality expression
  static final public void equal_expr() throws ParseException {
 /*@bgen(jjtree) equal_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      relation_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
      case 75:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 74:
          t = jj_consume_token(74);
          break;
        case 75:
          t = jj_consume_token(75);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                          arr[top++]=t.image;
        equal_expr();
      System.out.print("\u005ct\u005ct\u005ctEquality expression\u005cn");
             assign();
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

//Relational expression
  static final public void relation_expr() throws ParseException {
 /*@bgen(jjtree) relation_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATION_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      shift_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 76:
      case 77:
      case 78:
      case 79:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 76:
          t = jj_consume_token(76);
          break;
        case 77:
          t = jj_consume_token(77);
          break;
        case 78:
          t = jj_consume_token(78);
          break;
        case 79:
          t = jj_consume_token(79);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                       arr[top++]=t.image;
        relation_expr();
      System.out.print("\u005ct\u005ct\u005ctRelational expression\u005cn");
             assign();
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

//shift expression
  static final public void shift_expr() throws ParseException {
 /*@bgen(jjtree) shift_expr */
  SimpleNode jjtn000 = new SimpleNode(JJTSHIFT_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      additive_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 80:
      case 81:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 80:
          t = jj_consume_token(80);
          break;
        case 81:
          t = jj_consume_token(81);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                         arr[top++]=t.image;
        shift_expr();
      System.out.print("\u005ct\u005ct\u005ctShift expression\u005cn");
              assign();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//additive expression
  static final public void additive_expr() throws ParseException {
 /*@bgen(jjtree) additive_expr */
 SimpleNode jjtn000 = new SimpleNode(JJTADDITIVE_EXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      multiplicative_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
      case 82:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 82:
          t = jj_consume_token(82);
          break;
        case 66:
          t = jj_consume_token(66);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                arr[top++]=t.image;
        additive_expr();
        System.out.print("\u005ct\u005ct\u005ctAdditive expression\u005cn");
        assign();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void multiplicative_expr() throws ParseException {
 /*@bgen(jjtree) multiplicative_expr */
 SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVE_EXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      unary_expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
      case 83:
      case 84:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          t = jj_consume_token(53);
          break;
        case 83:
          t = jj_consume_token(83);
          break;
        case 84:
          t = jj_consume_token(84);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                            arr[top++]=t.image;
        multiplicative_expr();
                  System.out.print("\u005ct\u005ct\u005ctMultiplicative expression \u005cn");
                 assign();
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//constant
  static final public void constant() throws ParseException {
 /*@bgen(jjtree) constant */
 SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        t = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
      case CHARACTER_LITERAL:
        t = jj_consume_token(CHARACTER_LITERAL);
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.setText( t.image );
       arr[top++]=t.image;
       System.out.print("\u005ct\u005ct\u005ctConstant "+t.image+"\u005cn");
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

// 非终端符号name和<IDENTIFIER>是相同的
// 将Token对象赋给了临时变量tok，并且返回tok中image属性的值作为name()的语义值
  static final public String name() throws ParseException {
 /*@bgen(jjtree) name */
  SimpleNode jjtn000 = new SimpleNode(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.setText( t.image );{if (true) return t.image;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    }
    if (jj_3R_119()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    if (jj_3R_117()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(GOTO)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(66)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_93()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    if (jj_3R_115()) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_3R_119()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    }
    }
    if (jj_3R_113()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) return true;
    }
    if (jj_3R_111()) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    if (jj_3R_115()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_111()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_11()) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_69()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(51)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(70)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_18()) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    if (jj_3R_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  static private boolean jj_3R_107() {
    if (jj_scan_token(51)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(65)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(44)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(44)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_3R_104()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public FuckCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[53];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x135a0000,0x135a0000,0x3580000,0x0,0x0,0x0,0x0,0xc0006880,0xc0006880,0x6880,0x0,0x2080,0xc0000000,0x6880,0x6880,0x6880,0x0,0x6880,0x0,0x6880,0x0,0x3ffa0000,0x20000,0xca00000,0x3580000,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6880,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6880,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x280000,0x2000,0x4000,0x2000,0x218ffd,0x218ffd,0x218ffd,0x5,0x0,0x400,0x200c00,0x200c00,0x200c00,0x38,0x200c00,0x3c0,0x200c00,0x4000,0x0,0x0,0x0,0x0,0x0,0x4000,0x2000,0x280000,0xc00,0x80000,0x200000,0xffc02000,0x200000,0x80000,0x80000,0xc00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x3f,0x3f,0x0,0x0,0x0,0x3f,0x3f,0x3f,0x0,0x3f,0x0,0x3f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f,0x3,0x3,0x0,0x40,0x80,0x100,0x200,0x8,0xc00,0xc00,0xf000,0xf000,0x30000,0x30000,0x40004,0x40004,0x180000,0x180000,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[15];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FuckC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FuckC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FuckCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FuckC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FuckCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FuckC(FuckCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FuckCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[85];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 53; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 85; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
